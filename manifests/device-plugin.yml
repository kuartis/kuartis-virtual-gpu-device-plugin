# Copyright 2020 Amazon.com, Inc. or its affiliates
# Copyright 2022 Kuartis.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kuartis-virtual-gpu-device-plugin-daemonset
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: kuartis-virtual-gpu-device-plugin
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      # This annotation is deprecated. Kept here for backward compatibility
      # See https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: kuartis-virtual-gpu-device-plugin
    spec:
      hostIPC: true
      nodeSelector:
        k8s.kuartis.com/accelerator: vgpu
      tolerations:
        # This toleration is deprecated. Kept here for backward compatibility
        # See https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
        - key: CriticalAddonsOnly
          operator: Exists
        - key: k8s.kuartis.com/vgpu
          operator: Exists
          effect: NoSchedule
      # Mark this pod as a critical add-on; when enabled, the critical add-on
      # scheduler reserves resources for critical add-on pods so that they can
      # be rescheduled after a failure.
      # See https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      priorityClassName: "system-node-critical"
      # In case machine deploy MPS device plugin and change compute mode to
      initContainers:
        - name: set-compute-mode
          image: nvidia/cuda:11.5.0-runtime-ubuntu20.04
          command: ["nvidia-smi", "-c", "EXCLUSIVE_PROCESS"]
          securityContext:
            capabilities:
              add: ["SYS_ADMIN"]
      containers:
        - image: ghcr.io/kuartis/kuartis-virtual-gpu-device-plugin:v0.2.0
          name: kuartis-virtual-gpu-device-plugin-ctr
          args:
            - /usr/bin/vgpu-device-plugin
            - --vgpu=10
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: device-plugin
              mountPath: /var/lib/kubelet/device-plugins
        - image: nvidia/mps
          name: mps
          volumeMounts:
            - name: nvidia-mps
              mountPath: /tmp/nvidia-mps
          env:
            - name: CUDA_MPS_ACTIVE_THREAD_PERCENTAGE
              value: "10"
      volumes:
        - name: device-plugin
          hostPath:
            path: /var/lib/kubelet/device-plugins
        - name: nvidia-mps
          hostPath:
            path: /tmp/nvidia-mps
